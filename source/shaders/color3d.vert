""
"#version 120\r\n"
"uniform float fard;"
"uniform float neard;"
"uniform float fov;"
"uniform vec3 up;"
"uniform vec3 right;"
"uniform vec3 view;"
"uniform vec3 pos;"
"uniform float width;"
"uniform float height;"
"varying vec3 ip;"
"vec3 vec3mul(vec3 f, float s)"
"{"
"	vec3 v;"
"	v.x = f.x * s;"
"	v.y = f.y * s;"
"	v.z = f.z * s;"
"	return v;"
"}"
""
"vec3 vec3sub(vec3 f, vec3 s)"
"{"
"	vec3 v;"
"	v.x = f.x - s.x;"
"	v.y = f.y - s.y;"
"	v.z = f.z - s.z;"
"	return v;"
"}"
""
"vec3 vec3add(vec3 f, vec3 s)"
"{"
"	vec3 v;"
"	v.x = f.x + s.x;"
"	v.y = f.y + s.y;"
"	v.z = f.z + s.z;"
"	return v;"
"}"
""
"float mag3f(vec3 v)"
"{"
"	return sqrt((v.x * v.x) + (v.y * v.y) + (v.z * v.z));"
"}"
""
""
"float dot3f(vec3 v1, vec3 v2)"
"{"
"	return ((v1.x * v2.x) + (v1.y * v2.y) + (v1.z * v2.z));"
"}"
""
"vec3 cross3f(vec3 v1, vec3 v2)"
"{"
"	vec3 n;"
""
"	n.x = ((v1.y * v2.z) - (v1.z * v2.y));"
"	n.y = ((v1.z * v2.x) - (v1.x * v2.z));"
"	n.z = ((v1.x * v2.y) - (v1.y * v2.x));"
""
"	return n;"
"}"
""
"float vol3f2(vec3 a, vec3 b, vec3 c)"
"{"
"	float f;"
"	b = cross3f(b, c);"
"	f = dot3f(a, b);"
"	f = abs(f);"
"	f *= 1.0 / (2.0 * 3.0);"
"	return f;"
"}"
""
"float vol3f(vec3 a, vec3 b, vec3 c, vec3 d)"
"{"
"	a = vec3sub(a, d);"
"	b = vec3sub(b, d);"
"	c = vec3sub(c, d);"
"	return vol3f2(a, b, c);"
"}"
""
"float sa3f(vec3 a, vec3 b, vec3 c)"
"{"
"	float s, a1, a2, a3;"
"	vec3 ab, ac, bc;"
""
"	ab = vec3sub(a, b);"
"	ac = vec3sub(a, c);"
"	bc = vec3sub(b, c);"
""
"	a1 = mag3f(ab);"
"	a2 = mag3f(ac);"
"	a3 = mag3f(bc);"
""
"	s = (a1 + a2 + a3) / 2.0;"
""
"	return sqrt(s * (s - a1) * (s - a2) * (s - a3));"
"}"
""
"vec3 toxy2(vec3 vi, float wx, float wy, vec3 p[8])"
"{"
"	float v[12];"
"	int i;"
"	v[0] = vol3f(vi, p[0], p[1], p[2]) / sa3f(p[1], p[2], p[0]);"
"	v[1] = vol3f(vi, p[0], p[2], p[3]) / sa3f(p[0], p[3], p[2]);"
"	v[2] = vol3f(vi, p[1], p[2], p[6]) / sa3f(p[1], p[2], p[6]);"
"	v[3] = vol3f(vi, p[1], p[6], p[5]) / sa3f(p[1], p[6], p[5]);"
"	v[4] = vol3f(vi, p[2], p[7], p[6]) / sa3f(p[2], p[6], p[7]);"
"	v[5] = vol3f(vi, p[3], p[7], p[2]) / sa3f(p[7], p[3], p[2]);"
"	v[6] = vol3f(vi, p[3], p[0], p[7]) / sa3f(p[7], p[3], p[0]);"
"	v[7] = vol3f(vi, p[0], p[7], p[4]) / sa3f(p[7], p[4], p[0]);"
"	v[8] = vol3f(vi, p[1], p[5], p[4]) / sa3f(p[1], p[5], p[4]);"
"	v[9] = vol3f(vi, p[0], p[1], p[4]) / sa3f(p[0], p[1], p[4]);"
"	v[10] = vol3f(vi, p[5], p[6], p[7]) / sa3f(p[5], p[6], p[7]);"
"	v[11] = vol3f(vi, p[4], p[5], p[7]) / sa3f(p[4], p[5], p[7]);"
"	vi.x = wx * (v[4] + v[5]) / (v[8] + v[9] + v[4] + v[5]);"
"	vi.y = wy * (v[2] + v[3]) / (v[6] + v[7] + v[2] + v[3]);"
"	vi.z = ((v[10] + v[11]) / (v[0] + v[1] + v[10] + v[11]));"
"	return vi;"
"}"
""
"vec3 norm3f(vec3 n)"
"{"
"	float m;"
""
"	m = mag3f(n);"
""
"	n.x /= m;"
"	n.y /= m;"
"	n.z /= m;"
""
"	return n;"
"}"
""
"vec3 toxy(vec3 vi, float wx, float wy, vec3 viewv, vec3 posv, vec3 upv, vec3 strafev, float maxd, float mind, float fovv)"
"{"
"	vec3 pv[8];"
"	vec3 vvvv[3*2*2];"
"	float ta;"
"\r\n"
"#define X	0\r\n"
"#define Y	1\r\n"
"#define Z	2\r\n"
"#define NEARP	0\r\n"
"#define FARP		1\r\n"
"#define POS		0\r\n"
"#define NEG		1\r\n"
""
"	vvvv[X+3*NEARP+3*2*POS] = strafev;"
"	vvvv[Z+3*NEARP+3*2*POS] = vec3sub(viewv, posv);"
"	vvvv[Z+3*NEARP+3*2*POS] = norm3f(vvvv[Z+3*NEARP+3*2*POS]);"
"	vvvv[Y+3*NEARP+3*2*POS] = norm3f(cross3f(vvvv[X+3*NEARP+3*2*POS], vvvv[Z+3*NEARP+3*2*POS]));"
"	ta = tan(fovv / 180.0 * 3.14159 / 2.0);"
"	vvvv[Y+3*NEARP+3*2*POS] = vec3mul(vvvv[Y+3*NEARP+3*2*POS], wy / wx * ta);"
"	vvvv[X+3*NEARP+3*2*POS] = vec3mul(vvvv[X+3*NEARP+3*2*POS], ta);"
""
"	vvvv[X+3*FARP+3*2*POS] = vec3mul(vvvv[X+3*NEARP+3*2*POS], maxd - mind);"
"	vvvv[Y+3*FARP+3*2*POS] = vec3mul(vvvv[Y+3*NEARP+3*2*POS], maxd - mind);"
"	vvvv[Z+3*FARP+3*2*POS] = vec3mul(vvvv[Z+3*NEARP+3*2*POS], maxd - mind);"
""
"	vvvv[X+3*NEARP+3*2*NEG] = vec3mul(vvvv[X+3*NEARP+3*2*POS], -1);"
"	vvvv[Y+3*NEARP+3*2*NEG] = vec3mul(vvvv[Y+3*NEARP+3*2*POS], -1);"
"	vvvv[Z+3*NEARP+3*2*NEG] = vec3mul(vvvv[Z+3*NEARP+3*2*POS], -1);"
"	vvvv[X+3*FARP+3*2*NEG] = vec3mul(vvvv[X+3*FARP+3*2*POS], -1);"
"	vvvv[Y+3*FARP+3*2*NEG] = vec3mul(vvvv[Y+3*FARP+3*2*POS], -1);"
"	vvvv[Z+3*FARP+3*2*NEG] = vec3mul(vvvv[Z+3*FARP+3*2*POS], -1);"
""
"	pv[0] = vec3add(vvvv[X+3*FARP+3*2*NEG], vvvv[Y+3*FARP+3*2*POS]);"
"	pv[0] = vec3add(pv[0], vvvv[Z+3*FARP+3*2*POS]);"
"	pv[1] = vec3add(vvvv[X+3*FARP+3*2*POS], vvvv[Y+3*FARP+3*2*POS]);"
"	pv[1] = vec3add(pv[1], vvvv[Z+3*FARP+3*2*POS]);"
"	pv[2] = vec3add(vvvv[X+3*FARP+3*2*POS], vvvv[Y+3*FARP+3*2*NEG]);"
"	pv[2] = vec3add(pv[2], vvvv[Z+3*FARP+3*2*POS]);"
"	pv[3] = vec3add(vvvv[X+3*FARP+3*2*NEG], vvvv[Y+3*FARP+3*2*NEG]);"
"	pv[3] = vec3add(pv[3], vvvv[Z+3*FARP+3*2*POS]);"
"	pv[4] = vec3add(vvvv[X+3*NEARP+3*2*NEG], vvvv[Y+3*NEARP+3*2*POS]);"
"	pv[4] = vec3add(pv[4], vvvv[Z+3*NEARP+3*2*POS]);"
"	pv[5] = vec3add(vvvv[X+3*NEARP+3*2*POS], vvvv[Y+3*NEARP+3*2*POS]);"
"	pv[5] = vec3add(pv[5], vvvv[Z+3*NEARP+3*2*POS]);"
"	pv[6] = vec3add(vvvv[X+3*NEARP+3*2*POS], vvvv[Y+3*NEARP+3*2*NEG]);"
"	pv[6] = vec3add(pv[6], vvvv[Z+3*NEARP+3*2*POS]);"
"	pv[7] = vec3add(vvvv[X+3*NEARP+3*2*NEG], vvvv[Y+3*NEARP+3*2*NEG]);"
"	pv[7] = vec3add(pv[7], vvvv[Z+3*NEARP+3*2*POS]);"
"\r\n"
"#undef X\r\n"
"#undef Y\r\n"
"#undef Z\r\n"
"#undef NEARP\r\n"
"#undef FARP\r\n"
"#undef POS\r\n"
"#undef NEG\r\n"
"\r\n"
"	pv[0] = vec3add(pv[0], pos);"
"	pv[1] = vec3add(pv[1], pos);"
"	pv[2] = vec3add(pv[2], pos);"
"	pv[3] = vec3add(pv[3], pos);"
"	pv[4] = vec3add(pv[4], pos);"
"	pv[5] = vec3add(pv[5], pos);"
"	pv[6] = vec3add(pv[6], pos);"
"	pv[7] = vec3add(pv[7], pos);"
""
"	return toxy2(vi, wx, wy, pv);"
"}"
""
"void main()"
"{"
"	ip = gl_Vertex.xyz;"
"	gl_Position = gl_Vertex*vec4(2,2,2,1) - vec4(1,1,1,0);\r\n"
"	//gl_Position = vec4(toxy(gl_Vertex.xyz, width, height, view, pos, up, right, fard, neard, fov), 1);\r\n"
"}"